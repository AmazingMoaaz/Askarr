using System;
using System.Linq;
using System.Threading.Tasks;
using DSharpPlus;
using DSharpPlus.Entities;
using DSharpPlus.SlashCommands;
using Microsoft.Extensions.Logging;
using Requestrr.WebApi.Extensions;
using Requestrr.WebApi.RequestrrBot.ChatClients.Discord;
using Requestrr.WebApi.RequestrrBot.Movies;
using Requestrr.WebApi.RequestrrBot.TvShows;

namespace Requestrr.WebApi.RequestrrBot
{
    public class SlashCommands : ApplicationCommandModule
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger _logger;

        public SlashCommands(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            _logger = _serviceProvider.Get<ILogger>();
        }

        [REQUEST_COMMAND_START]
        [SlashCommandGroup("[REQUEST_GROUP_NAME]", "[REQUEST_GROUP_DESCRIPTION]")]
        public class RequestGroup : ApplicationCommandModule
        {
            [MOVIE_COMMAND_START]
            [SlashCommandGroup("[REQUEST_MOVIE_GROUP_NAME]", "[REQUEST_MOVIE_GROUP_DESCRIPTION]")]
            public class RequestMovieCommands : ApplicationCommandModule
            {
                private readonly IServiceProvider _serviceProvider;
                private readonly ILogger _logger;

                public RequestMovieCommands(IServiceProvider serviceProvider)
                {
                    _serviceProvider = serviceProvider;
                    _logger = _serviceProvider.Get<ILogger>();
                }

                [SlashCommand("[REQUEST_MOVIE_TITLE_NAME]", "[REQUEST_MOVIE_TITLE_DESCRIPTION]")]
                [RequireRoles(new ulong[] { [REQUIRED_MOVIE_ROLE_IDS] })]
                [RequireChannels(new ulong[] { [REQUIRED_CHANNEL_IDS] })]
                public async Task ByTitle(InteractionContext ctx, [Option("[REQUEST_MOVIE_TITLE_OPTION_NAME]", "[REQUEST_MOVIE_TITLE_OPTION_DESCRIPTION]")] string movieTitle)
                {
                    try
                    {
                        var settings = _serviceProvider.Get<DiscordSettingsProvider>().Provide();
                        await ctx.CreateResponseAsync(InteractionResponseType.DeferredChannelMessageWithSource, new DiscordInteractionResponseBuilder().AsEphemeral(settings.AutomaticallyPurgeCommandMessages));

                        var workFlow = _serviceProvider.Get<MovieWorkflowFactory>().CreateRequestingWorkflow(ctx.Interaction);
                        await workFlow.SearchMovieAsync(movieTitle.Trim());
                    }
                    catch (System.Exception ex)
                    {
                        _logger.LogError(ex, "Error while sending help command: " + ex.Message);
                    }
                }

                [SlashCommand("[REQUEST_MOVIE_TMDB_NAME]", "[REQUEST_MOVIE_TMDB_DESCRIPTION]")]
                [RequireRoles(new ulong[] { [REQUIRED_MOVIE_ROLE_IDS] })]
                [RequireChannels(new ulong[] { [REQUIRED_CHANNEL_IDS] })]
                public async Task ByTmdb(InteractionContext ctx, [Option("[REQUEST_MOVIE_TMDB_OPTION_NAME]", "[REQUEST_MOVIE_TMDB_OPTION_DESCRIPTION]")] long theMovieDbId)
                {
                    try
                    {
                        var settings = _serviceProvider.Get<DiscordSettingsProvider>().Provide();
                        await ctx.CreateResponseAsync(InteractionResponseType.DeferredChannelMessageWithSource, new DiscordInteractionResponseBuilder().AsEphemeral(settings.AutomaticallyPurgeCommandMessages));

                        var workFlow = _serviceProvider.Get<MovieWorkflowFactory>().CreateRequestingWorkflow(ctx.Interaction);
                        await workFlow.SearchMovieAsync((int)theMovieDbId);
                    }
                    catch (System.Exception ex)
                    {
                        _logger.LogError(ex, "Error while sending help command: " + ex.Message);
                    }
                }
            }
            [MOVIE_COMMAND_END]

            [TV_COMMAND_START]
            [SlashCommandGroup("[REQUEST_TV_GROUP_NAME]", "[REQUEST_TV_GROUP_DESCRIPTION]")]
            public class RequestTvShowCommands : ApplicationCommandModule
            {
                private readonly IServiceProvider _serviceProvider;
                private readonly ILogger _logger;

                public RequestTvShowCommands(IServiceProvider serviceProvider)
                {
                    _serviceProvider = serviceProvider;
                    _logger = _serviceProvider.Get<ILogger>();
                }

                [SlashCommand("[REQUEST_TV_TITLE_NAME]", "[REQUEST_TV_TITLE_DESCRIPTION]")]
                [RequireRoles(new ulong[] { [REQUIRED_TV_ROLE_IDS] })]
                [RequireChannels(new ulong[] { [REQUIRED_CHANNEL_IDS] })]
                public async Task ByTitle(InteractionContext ctx, [Option("[REQUEST_TV_TITLE_OPTION_NAME]", "[REQUEST_TV_TITLE_OPTION_DESCRIPTION]")] string tvShowTitle)
                {
                    try
                    {
                        var settings = _serviceProvider.Get<DiscordSettingsProvider>().Provide();
                        await ctx.CreateResponseAsync(InteractionResponseType.DeferredChannelMessageWithSource, new DiscordInteractionResponseBuilder().AsEphemeral(settings.AutomaticallyPurgeCommandMessages));

                        var workFlow = _serviceProvider.Get<TvShowWorkflowFactory>().CreateRequestingWorkflow(ctx.Interaction);
                        await workFlow.SearchTvShowAsync(tvShowTitle.Trim());
                    }
                    catch (System.Exception ex)
                    {
                        _logger.LogError(ex, "Error while sending help command: " + ex.Message);
                    }
                }

                [SlashCommand("[REQUEST_TV_TVDB_NAME]", "[REQUEST_TV_TVDB_DESCRIPTION]")]
                [RequireRoles(new ulong[] { [REQUIRED_TV_ROLE_IDS] })]
                [RequireChannels(new ulong[] { [REQUIRED_CHANNEL_IDS] })]
                public async Task ByTvdb(InteractionContext ctx, [Option("[REQUEST_TV_TVDB_OPTION_NAME]", "[REQUEST_TV_TVDB_OPTION_DESCRIPTION]")] long tvDbID)
                {
                    try
                    {
                        var settings = _serviceProvider.Get<DiscordSettingsProvider>().Provide();
                        await ctx.CreateResponseAsync(InteractionResponseType.DeferredChannelMessageWithSource, new DiscordInteractionResponseBuilder().AsEphemeral(settings.AutomaticallyPurgeCommandMessages));

                        var workFlow = _serviceProvider.Get<TvShowWorkflowFactory>().CreateRequestingWorkflow(ctx.Interaction);
                        await workFlow.SearchTvShowAsync((int)tvDbID);
                    }
                    catch (System.Exception ex)
                    {
                        _logger.LogError(ex, "Error while sending help command: " + ex.Message);
                    }
                }
            }
            [TV_COMMAND_END]
        }
        [REQUEST_COMMAND_END]

        [SlashCommand("[REQUEST_PING_NAME]", "[REQUEST_PING_DESCRIPTION]")]
        [RequireChannels(new ulong[] { [REQUIRED_CHANNEL_IDS] })]
        public async Task Ping(InteractionContext ctx)
        {
            try
            {
                await new DiscordPingWorkFlow(ctx).HandlePingAsync();
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "Error while sending ping command: " + ex.Message);
            }
        }

        [SlashCommand("[REQUEST_HELP_NAME]", "[REQUEST_HELP_DESCRIPTION]")]
        [RequireChannels(new ulong[] { [REQUIRED_CHANNEL_IDS] })]
        public async Task Help(InteractionContext ctx)
        {
            try
            {
                await new DiscordHelpWorkFlow(_serviceProvider.Get<DiscordClient>(), ctx, _serviceProvider.Get<DiscordSettingsProvider>())
                    .HandleHelpAsync();
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "Error while sending help command: " + ex.Message);
            }
        }
    }
}